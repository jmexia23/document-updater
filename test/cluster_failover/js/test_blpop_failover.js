// Generated by CoffeeScript 1.7.1
;(function() {
  var PING_DELAY,
    counter,
    listenForPing,
    listenInBackground,
    previous,
    rclient1,
    rclient2,
    redis,
    sendPing,
    sendPings

  redis = require('redis-sharelatex')

  rclient1 = redis.createClient({
    cluster: [
      {
        port: '7000',
        host: 'localhost'
      }
    ]
  })

  rclient2 = redis.createClient({
    cluster: [
      {
        port: '7000',
        host: 'localhost'
      }
    ]
  })

  counter = 0

  sendPing = function(cb) {
    if (cb == null) {
      cb = function() {}
    }
    return rclient1.rpush('test-blpop', counter, function(error) {
      if (error != null) {
        console.error('[SENDING ERROR]', error.message)
      }
      if (error == null) {
        counter += 1
      }
      return cb()
    })
  }

  previous = null

  listenForPing = function(cb) {
    return rclient2.blpop('test-blpop', 200, function(error, result) {
      var key, value
      if (error != null) {
        return cb(error)
      }
      ;(key = result[0]), (value = result[1])
      value = parseInt(value, 10)
      if (value % 10 === 0) {
        console.log('.')
      }
      if (previous != null && value !== previous + 1) {
        error = new Error(
          'Counter not in order. Got ' + value + ', expected ' + (previous + 1)
        )
      }
      previous = value
      return cb(error, value)
    })
  }

  PING_DELAY = 100

  ;(sendPings = function() {
    return sendPing(function() {
      return setTimeout(sendPings, PING_DELAY)
    })
  })()

  ;(listenInBackground = function(cb) {
    return listenForPing(function(error, value) {
      if (error) {
        console.error('[RECEIVING ERROR]', error.message)
      }
      return setTimeout(listenInBackground)
    })
  })(function() {})
}.call(this))
